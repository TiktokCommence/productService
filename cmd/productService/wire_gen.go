// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/TiktokCommence/productService/internal/biz"
	"github.com/TiktokCommence/productService/internal/conf"
	"github.com/TiktokCommence/productService/internal/data/cache"
	"github.com/TiktokCommence/productService/internal/data/repository"
	"github.com/TiktokCommence/productService/internal/registry"
	"github.com/TiktokCommence/productService/internal/server"
	"github.com/TiktokCommence/productService/internal/service"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, registryConf *conf.RegistryConf, expiration *conf.Expiration, listOptions *conf.ListOptions, logger log.Logger) (*kratos.App, func(), error) {
	db := repository.NewDB(data)
	gdb := repository.NewGdb(db)
	productInfoRepository := repository.NewProductInfoRepository(gdb, logger)
	client := cache.NewRedisClient(data)
	productCache := cache.NewProductCache(client, logger)
	generateIDImplement := cache.NewGenerateIDImplement(client)
	productBiz := biz.NewProductBiz(gdb, productInfoRepository, productCache, generateIDImplement, expiration, logger)
	productService := service.NewProductService(productBiz, listOptions)
	grpcServer := server.NewGRPCServer(confServer, productService, logger)
	etcdRegistry := registry.NewRegistrarServer(registryConf, logger)
	app := newApp(logger, grpcServer, etcdRegistry)
	return app, func() {
	}, nil
}
